{"version":3,"sources":["TodoContext/useLocalStorage.js","TodoContext/index.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","CreateTodoButton/index.js","Modal/index.js","TodoForm/index.js","App/AppUI.js","App/index.js","index.js"],"names":["defaultTodos","title","completed","TodoContext","React","createContext","TodoProvider","props","useState","searchValue","setSearchValue","modalOpen","setModalOpen","itemName","initialValue","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","parsedItem","parsedItems","saved","localStorage","getItem","JSON","parse","stringify","loadItem","e","saveItem","itemToSave","useLocalStorage","todos","setTodos","completedTodos","filter","todo","length","totalTodos","Provider","value","onCompleteTodo","todoIndex","findIndex","newTodos","onDeleteTodo","splice","onAddTodo","push","children","TodoCounter","useContext","className","TodoSearch","placeholder","onChange","event","console","log","target","TodoList","TodoItem","onClick","onComplete","text","onDelete","CreateTodoButton","previousState","Modal","ReactDOM","createPortal","document","getElementById","TodoForm","todoTitle","setTodoTitle","saveTodo","onAccept","preventDefault","onSubmit","type","AppUI","toLowerCase","includes","lenght","map","toLocaleLowerCase","App","render","saludo"],"mappings":"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","file":"static/js/main.244acc11.chunk.js","sourcesContent":["//En este archivo se define el Hook useLocalStorage \r\n\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nconst defaultTodos = [\r\n    { title: \"Cortar Cebolla\", completed: false },\r\n    { title: \"Cortar Tomate\", completed: false },\r\n    { title: \"Fritar Huevo\", completed: false },\r\n  ];\r\n  \r\n  //Hook que se encarga de obtener y guardar cosas del LocalStorage\r\n  //Recibe el nombre de la clave para usar en el LocalStorage y el valor inicial\r\n  export function useLocalStorage(itemName, initialValue) {\r\n  \r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [item, setItem] = useState(initialValue);\r\n  \r\n    React.useEffect(() => {\r\n      setTimeout(() => {\r\n  \r\n        //Función para obtener los ITEMS del LocalStorage\r\n        function loadItem() {\r\n  \r\n          const saved = localStorage.getItem(itemName);\r\n          let parsedItems;\r\n          //Si no hay nada en el LocalStorage\r\n          if (!saved) {\r\n            //Guarde en el LocalStorage el valor inicial\r\n            localStorage.setItem(itemName, JSON.stringify(defaultTodos))\r\n            //E arreglo de respuesta es un arreglo vacío\r\n            parsedItems = [...defaultTodos];\r\n          }\r\n          else {\r\n            //... de lo contrario el arreglo es el obtenido\r\n            parsedItems = JSON.parse(saved);\r\n          }\r\n          return parsedItems;\r\n        }\r\n  \r\n        try {\r\n          const parsedItem = loadItem();\r\n          setLoading(false);\r\n          setItem(parsedItem);\r\n        } catch (e) {\r\n          setError(true);\r\n        }\r\n      }, 2000)\r\n    })\r\n  \r\n  \r\n  \r\n    //Función para guardar los Todos\r\n    function saveItem(itemToSave) {\r\n      try {\r\n        localStorage.setItem(itemName, JSON.stringify(itemToSave));\r\n        setItem(itemToSave);\r\n      } catch (e) {\r\n        setError(true);\r\n      }\r\n    }\r\n    //retornamos los elementos necesarios para el Hook, comon son 3 se deben entregar en un objeto\r\n    return { item, saveItem, loading, error }\r\n  }","/* eslint-disable no-unused-vars */\r\n import React from 'react';\r\nimport { useLocalStorage } from './useLocalStorage';\r\n\r\n//esto creo un contexto, que permite compartir estados entre los componentes de la aplicación\r\n\r\nexport const TodoContext = React.createContext();\r\n\r\n\r\n//Esta función sirve para poder crear un atajo para acceder al componente TodoContext.Provider\r\nexport function TodoProvider(props)\r\n{\r\n  //Creamos un estado para el valor de la búsqueda\r\n  const [searchValue, setSearchValue] = React.useState(\"\");\r\n  //Estado para el MOdal\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  //Se cargan los datos usando el Custom Hook creado arriba, las instrucciones en el objeto, cambian el nombre de la variable\r\n  //El nombre de los atributos dentro del objeto deben llamarse igual que el objeto que retorna, por eso se hace el cambio de nombre\r\n  const {\r\n    item: todos,\r\n    saveItem: setTodos,\r\n    loading,\r\n    error\r\n  } = useLocalStorage(\"TODOS_V1\", []);\r\n\r\n  //!! es una forma breve de decir \"todo.completed == true\"\r\n  const completedTodos = todos.filter((todo) => !!todo.completed).length;\r\n  const totalTodos = todos.length;\r\n\r\n  //función que se ejecuta cuando se completa el Todo\r\n  function onCompleteTodo(title) {\r\n    const todoIndex = todos.findIndex(todo => todo.title === title);\r\n    const newTodos = [...todos];\r\n    newTodos[todoIndex].completed = true;\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  //función que se ejecuta cuando se añade un nuevo Todo\r\n  function onAddTodo(title) { \r\n    const newTodos = [...todos];\r\n    newTodos.push({title: title});\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  //función que se ejecuta cuando se quiere borrar el Todo\r\n  function onDeleteTodo(title) {\r\n    const todoIndex = todos.findIndex(todo => todo.title === title);\r\n    const newTodos = [...todos];\r\n    newTodos.splice(todoIndex, 1);\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  //Esto usa el Hook useEffect el cual permite ejecutar una función justo antes de renderizar\r\n  //cuando React ya ha modificado el DOM pero no se ha generado el HTML\r\n  React.useEffect(() => {\r\n\r\n\r\n  }, [totalTodos]//se pone un arreglo con la variable que se quiere observar, cuando esta cambia es que se ejcuta la función\r\n   )\r\n\r\n   return(\r\n        //El componente TodoProvider incluye al componente TodoContext.Provider y este a su vez incluye todos los hijos\r\n        //que se hayan puesto dentro de TodoProvider.\r\n        //La propiedad value contiene los datos que se comparten en el contexto\r\n        <TodoContext.Provider value = {{\r\n            loading,\r\n            error,\r\n            todos,\r\n            totalTodos,\r\n            completedTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            onCompleteTodo,\r\n            onDeleteTodo,\r\n            onAddTodo,\r\n            modalOpen,\r\n            setModalOpen            \r\n        }}>\r\n            {props.children}\r\n\r\n        </TodoContext.Provider>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport './TodoCounter.css';\r\nimport { TodoContext } from '../TodoContext';\r\n\r\nfunction TodoCounter()\r\n{\r\n  const {totalTodos, completedTodos} = useContext(TodoContext);\r\n    return (\r\n      <h2 className = \"TodoCounter\">\r\n        Has hecho {completedTodos} de {totalTodos} tareas\r\n      </h2>\r\n    )\r\n}\r\n\r\nexport {TodoCounter};\r\n","import React, { useContext } from 'react';\r\nimport { TodoContext } from '../TodoContext';\r\nimport './TodoSearch.css'\r\n\r\n//Esta función recib como props, los estados que recibe desde App\r\nfunction TodoSearch()\r\n{\r\n\r\n    const {searchValue, setSearchValue} = useContext(TodoContext);\r\n    /*Esto usa el Hook useState. Este recibe un parámetro, el primer valor,\r\n    que solo se usa en el primer render.\r\n    El Hook retorna dos valores, el valor actual del estado (searchValue) y una función \r\n    para cambiarlo (SetSearchValue)\r\n    */\r\n    \r\n    //const [searchValue, SetSearchValue] = React.useState('');\r\n\r\n    function onSearchChanged(event)\r\n    {\r\n        console.log(event.target.value);\r\n        //Cuando cambia el valor de búsqueda, se almacena en el estado\r\n        setSearchValue(event.target.value);\r\n    }\r\n\r\n    return [\r\n        <input\r\n        className = \"TodoSearch\"\r\n        placeholder=\"Cebolla\"\r\n        //Se almacena el valor de a búsqueda en el valor de este input\r\n        value = {searchValue}\r\n        onChange = {onSearchChanged}\r\n        ></input>\r\n        ,\r\n        <p>El valor del search es: {searchValue}</p>\r\n    ]\r\n}\r\n\r\nexport {TodoSearch};\r\n","import React from 'react';\r\nimport './TodoList.css'\r\n\r\nfunction TodoList(props)\r\n{\r\n    return (\r\n        <section>\r\n        <ul>\r\n            {props.children}            \r\n        </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {TodoList};\r\n","import React from 'react';\r\nimport './TodoItem.css'\r\n\r\nfunction TodoItem(props)\r\n{\r\n    function onClickCompleted()\r\n    {\r\n        props.onComplete(props.text);\r\n    }\r\n\r\n    function onClickDeleted()\r\n    {\r\n        props.onDelete(props.text);\r\n    }\r\n\r\n    return (\r\n        <li className=\"TodoItem\">\r\n            <span \r\n            className={`Icon Icon-check ${props.completed && 'Icon-check--active'}`}\r\n            onClick = {onClickCompleted}\r\n            >\r\n                \r\n\r\n            √\r\n            </span>\r\n\r\n            <p className={`TodoItem-p ${props.completed && 'TodoItem-p--complete'}`} >{props.text}</p>\r\n            <span \r\n            className=\"Icon Icon-delete\"\r\n            onClick = {onClickDeleted}\r\n            >\r\n\r\n            X\r\n            </span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport {TodoItem};\r\n","import React from 'react';\r\nimport './CreateTodoButton.css'\r\n\r\nfunction CreateTodoButton(props)\r\n{\r\n    //Esto es una función que se usa para responder ante el evento onclick del botón.\r\n    function onClickButtonCreate(msg)\r\n    {\r\n        props.setModalOpen(previousState => !previousState);\r\n    }\r\n\r\n    return (\r\n        <button \r\n        className= \"CreateTodoButton\"\r\n        onClick = {() => onClickButtonCreate(\"Aquí crear el TODO con el modal\")}\r\n                \r\n\r\n        >+</button>\r\n    )\r\n}\r\n\r\nexport {CreateTodoButton};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\n\r\n//Este componente pinta en modo Modal los hijos que se le envian por Prop\r\nexport function Modal(props)\r\n{\r\n    return(\r\n        //La función creaTePortal renderiza elementos en el elemento HTML que se le pase\r\n        ReactDOM.createPortal(\r\n            <div className = \"ModalBackground\">\r\n                {props.children}\r\n            </div>\r\n            ,\r\n            document.getElementById(\"modal\")\r\n        )\r\n    )\r\n}\r\n\r\n","/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport { TodoContext } from \"../TodoContext\";\r\nimport \"./TodoForm.css\"\r\n\r\nconst TodoForm = () => {\r\n  const [todoTitle, setTodoTitle] = React.useState(\"\");\r\n  const {onAddTodo:saveTodo, setModalOpen} = React.useContext(TodoContext);\r\n\r\n  function onChange(event) {\r\n      setTodoTitle(event.target.value);\r\n  }\r\n\r\n  function onCancel() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  function onAccept(event) {\r\n    //TODO\r\n    event.preventDefault();\r\n    saveTodo(todoTitle);\r\n    setModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onAccept}>\r\n      <label> Crear Nuevo TODO </label>\r\n      <textarea placeholder=\"Cortar Cebolla\" onChange={onChange}></textarea>\r\n      <div>\r\n        <button className= \"TodoForm-button TodoForm-button--cancel\"type=\"button\" onClick={onCancel}>\r\n          Cancelar\r\n        </button>\r\n        <button className = \"TodoForm-button TodoForm-button--add\" type=\"submit\" onClick={onAccept}>\r\n          Aceptar\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import { React, Fragment, useContext } from \"react\";\r\nimport { TodoCounter } from \"../TodoCounter\";\r\nimport { TodoSearch } from \"../TodoSearch\";\r\nimport { TodoList } from \"../TodoList\";\r\nimport { TodoItem } from \"../TodoItem\";\r\nimport { CreateTodoButton } from \"../CreateTodoButton\";\r\nimport { TodoContext } from \"../TodoContext\";\r\nimport { Modal } from '../Modal'\r\nimport TodoForm from \"../TodoForm\";\r\n\r\n//De esta manera se usa el contexto en este módulo.\r\n//Los valores son las propiedades que se crean y se pasan en el Provider\r\n\r\nexport function AppUI() {\r\n\r\n  const {\r\n    loading,\r\n    error,\r\n    searchValue,\r\n    todos,\r\n    onCompleteTodo,\r\n    onDeleteTodo,\r\n    modalOpen,\r\n    setModalOpen\r\n  } = useContext(TodoContext);\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <TodoCounter />\r\n\r\n      <TodoSearch />\r\n\r\n      <TodoList>\r\n        {//Si está carganbdo poner un mensaje\r\n          loading && <p>Estamos cargando</p>\r\n        }\r\n\r\n        {//Si hubo un error poner un mensaje\r\n          error && <p>Hubo un error</p>}\r\n\r\n        {//Si no está cargando y los TODOS encontrados es vacío \r\n          (!loading && searchValue !== \"\" && (todos.filter(todo => todo.title.toLowerCase().includes(searchValue.toLowerCase()).lenght))) &&\r\n          <p>No hay TODOS que coincidan con la búsqueda</p>\r\n        }\r\n\r\n        {todos.map((todo) => {\r\n          if (\r\n            searchValue === \"\" ||\r\n            todo.title.toLowerCase().includes(searchValue.toLocaleLowerCase())\r\n          ) {\r\n            return (\r\n              <TodoItem\r\n                completed={todo.completed}\r\n                key={todo.title}\r\n                text={todo.title}\r\n                onComplete={onCompleteTodo}\r\n                onDelete={onDeleteTodo}\r\n              />\r\n            );\r\n          }\r\n          return \"\";\r\n        })}\r\n\r\n      </TodoList>\r\n\r\n      {!!modalOpen &&\r\n        <Modal>\r\n          <TodoForm></TodoForm>\r\n        </Modal>\r\n      }\r\n      <CreateTodoButton\r\n        setModalOpen={setModalOpen} />\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\nimport { AppUI } from './AppUI'\r\nimport { TodoProvider } from \"../TodoContext\";\r\n//import './App.css';\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////Componente App////////////////////////////////////////////////////////\r\nfunction App(props) { \r\n\r\n  return (\r\n    <TodoProvider>\r\n      <AppUI/>\r\n    </TodoProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index';\n\n\nReactDOM.render(  \n    <App saludo = \"Holi\" /> \n    ,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}